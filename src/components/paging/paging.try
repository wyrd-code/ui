import { ExtractPropTypes, computed, ref, watch, inject, provide } from 'vue'

export interface PagingConfig {
  showBoundaryLinks: boolean
  showDirectionLinks: boolean
  iconStart?: string
  iconEnd?: string
  iconPrev?: string
  iconNext?: string
}

export const WUI_PAGING_CONFIG_DEFAULT: PagingConfig = Object.freeze({
  showBoundaryLinks: true,
  showDirectionLinks: true,
  iconPrev: 'icon-ph-caret-left-light',
  iconNext: 'icon-ph-caret-right-light',
  iconStart: 'icon-ph-arrow-left-light',
  iconEnd: 'icon-ph-arrow-right-light',
})

/*
    <slot v-if="!$props.input">
      <WuiButton
        v-for="(n, i) in paginationRange"
        :key="i"
        :ref="setItemRefByIndex(i)"
        :class="{
          'va-button--ellipsis': n === '...',
          'va-button--current': n === currentPage,
        }"
        :aria-label="t(`goToSpecificPage`, { page: n })"
        :aria-current="n === currentPage"
        :disabled="$props.disabled || n === '...'"
        v-bind="getPageButtonProps(n)"
        @click="onUserInput(n)"
      >
        {{ n }}
      </WuiButton>
    </slot>
    <input
      v-else
      ref="htmlInput"
      v-model="inputValue"
      class="va-pagination__input va-button"
      :aria-label="t('goToSpecificPageInput')"
      :style="inputStyleComputed"
      :class="inputClassComputed"
      v-bind="inputAttributesComputed"
      @keydown.enter="changeValue"
      @focus="focusInput"
      @blur="changeValue"
    />

    <div class="wui-paging">
      <div class="icon-ph-caret-left-light" />
      <div class="icon-ph-caret-left-light" />

      <div class="wui-paging__summary">
        {{ currentPage }}
        of
        {{ totalPages }}
      </div>

      <div class="icon-ph-caret-right-light" />
      <div class="icon-ph-caret-right-light" />
    </div>

export function makePaging(
  current: number,
  total: number,
  delta = 2,
  gap = '...'
): Array<number> {
  if (total <= 1) return [1]

  // const center = [current] as (number | typeof gap)[]
  const center = [current] as number[]

  // no longer O(1) but still very fast
  for (let i = 1; i <= delta; i++) {
    center.unshift(current - i)
    center.push(current + i)
  }

  const filteredCenter = center.filter((page) => page > 1 && page < total)

  // const includeLeftGap = current > 3 + delta
  const includeLeftPages = current === 3 + delta
  // const includeRightGap = current < total - (2 + delta)
  const includeRightPages = current === total - (2 + delta)

  if (includeLeftPages) filteredCenter.unshift(2)
  if (includeRightPages) filteredCenter.push(total - 1)
  // if (includeLeftGap) filteredCenter.unshift(gap)
  // if (includeRightGap) filteredCenter.push(gap)

  return [1, ...filteredCenter, total]
}

export interface ReadManyResultPagingMeta {
  hasNextPage: boolean
  hasPreviousPage: boolean
  startCursor?: string
  endCursor?: string
  cursor?: string
}

export const setPaginationRange = (
  currentPage = 1,
  visiblePages: number,
  pages: number,
  includeBoundary = false
) => {
  let start = 0
  if (pages === 0) {
    pages = 1
  }
  if (visiblePages > pages) {
    visiblePages = pages
  }

  if (visiblePages === 0) {
    start = 1

    // to prevent extra long pagination, can be overwritten by user via `visiblePages` property
    visiblePages = pages > 10 ? 10 : pages
  } else {
    const paginationMiddlePage = visiblePages / 2
    if (currentPage - paginationMiddlePage <= 0 || currentPage > pages) {
      start = 1
    } else {
      start =
        currentPage + paginationMiddlePage > pages
          ? pages - visiblePages + 1
          : Math.ceil(currentPage - paginationMiddlePage)
    }
  }

  const range: Array<'...' | number> = []

  for (let i = 0; i < visiblePages; i++) {
    range.push(start + i)
  }

  if (includeBoundary && visiblePages < 7) {
    pages >= 7 &&
      console.warn(
        '[va-pagination] To work in a proper way, the `boundaryNumbers` prop needs at least 7 visible pages to be set via the `visiblePages` prop (first, last, 2 boundaries, current, previous, next).'
      )
  } else if (includeBoundary) {
    start !== 1 && range.splice(0, 2, 1, '...')
    range[range.length - 1] !== pages && range.splice(-2, 2, '...', pages)
  }

  return range
}

const usesTotal = computed(() => !!((props.total || props.total === 0) && props.pageSize))
const { valueComputed }: { valueComputed: WritableComputedRef<number> } = useStateful(props, emit)

const currentValue = computed({
  get: () => usesTotal.value ? Math.ceil(valueComputed.value / props.pageSize) || 1 : valueComputed.value,
  set: (value) => { valueComputed.value = value },
})

const paginationRange = computed(() => {
  const { visiblePages, total, pageSize, boundaryNumbers, pages } = props
  const value = currentValue.value || 1
  const totalPages = usesTotal.value ? Math.ceil(total / pageSize) : pages
  return setPaginationRange(value, visiblePages, totalPages, boundaryNumbers)
})

const lastPage = computed(() => usesTotal.value ? Math.ceil(props.total / props.pageSize) || 1 : +props.pages)

const isLastPageNotVisible = computed(() => ((!!props.visiblePages && lastPage.value > props.visiblePages)) || props.input)

const showBoundaryLinks = computed(() => {
  const { boundaryLinks, boundaryNumbers } = props
  return isLastPageNotVisible.value && boundaryLinks && !boundaryNumbers
})

const showDirectionLinks = computed(() => isLastPageNotVisible.value && props.directionLinks)

const showPagination = cmputed(() => lastPage.value > 1 || (!props.hideOnSinglePage && lastPage.value <= 1))

const clamp = (number: number, lower: number, upper: number) => {
  return Math.min(Math.max(number, lower), upper)
}

export const getVisiblePaging = (
  currentPage: number,
  pageCount: number,
  pagesShown: number,
  MINIMUM_PAGE_SIZE: number = 5
): Array<string | number> => {
  let delta: number
  currentPage = clamp(currentPage, 1, pageCount)
  pagesShown = clamp(pagesShown, MINIMUM_PAGE_SIZE, pageCount)
  const centerPagesShown = pagesShown - 5
  const boundaryPagesShown = pagesShown - 3

  if (pageCount <= pagesShown) {
    delta = pagesShown
  } else {
    delta =
      currentPage < boundaryPagesShown ||
      currentPage > pageCount - boundaryPagesShown
        ? boundaryPagesShown
        : centerPagesShown
  }

  const range = {
    start: Math.round(currentPage - delta / 2),
    end: Math.round(currentPage + delta / 2),
  }

  if (range.start - 1 === 1 || range.end + 1 === pageCount) {
    range.start += 1
    range.end += 1
  }
  let pages: (string | number)[] =
    currentPage > delta
      ? getRange(
          Math.min(range.start, pageCount - delta),
          Math.min(range.end, pageCount)
        )
      : getRange(1, Math.min(pageCount, delta + 1))

  if (currentPage > pageCount - boundaryPagesShown && pageCount > pagesShown) {
    pages = getRange(pageCount - delta, pageCount)
  }

  const withDots = (value: number, pair: (string | number)[]) =>
    pages.length + 1 !== pageCount ? pair : [value]
  const lastPage = pages[pages.length - 1]

  if (pages[0] !== 1) {
    pages = withDots(1, [1, WUI_PAGING_SEPARATOR]).concat(pages)
  }

  if (lastPage && lastPage < pageCount) {
    pages = pages.concat(withDots(pageCount, [WUI_PAGING_SEPARATOR, pageCount]))
  }

  return pages
}

*/
